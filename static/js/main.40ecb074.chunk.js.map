{"version":3,"sources":["Messages.js","Input.js","App.js","serviceWorker.js","index.js"],"names":["Messages","messages","this","props","className","map","m","renderMessage","message","member","text","currentMember","id","style","backgroundColor","clientData","color","username","Component","Input","state","e","setState","target","value","preventDefault","onSendMessage","onSubmit","onChange","type","placeholder","autoFocus","randomName","adjectives","nouns","Math","floor","random","length","App","toString","drone","publish","room","window","Scaledrone","data","on","error","console","clientId","subscribe","push","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"4PAoCeA,G,uLAhCH,IAAD,OACAC,EAAYC,KAAKC,MAAjBF,SACP,OACE,wBAAIG,UAAU,iBACXH,EAASI,KAAI,SAAAC,GAAC,OAAI,EAAKC,cAAcD,S,oCAK9BE,GAAU,IACfC,EAAgBD,EAAhBC,OAAQC,EAAQF,EAARE,KACRC,EAAiBT,KAAKC,MAAtBQ,cAEDP,EADgBK,EAAOG,KAAOD,EAAcC,GAEhD,iCAAmC,mBACrC,OACE,wBAAIR,UAAWA,GACf,0BACEA,UAAU,SACVS,MAAO,CAACC,gBAAiBL,EAAOM,WAAWC,SAE3C,yBAAKZ,UAAU,mBACb,yBAAKA,UAAU,YACZK,EAAOM,WAAWE,UAErB,yBAAKb,UAAU,QAAQM,S,GA1BVQ,cCiCRC,E,2MAhCbC,MAAQ,CACNV,KAAM,I,wEAGCW,GACPnB,KAAKoB,SAAS,CAACZ,KAAMW,EAAEE,OAAOC,U,+BAGvBH,GACPA,EAAEI,iBACFvB,KAAKoB,SAAS,CAACZ,KAAM,KACrBR,KAAKC,MAAMuB,cAAcxB,KAAKkB,MAAMV,Q,+BAG5B,IAAD,OACP,OACE,yBAAKN,UAAU,SACb,0BAAMuB,SAAU,SAAAN,GAAC,OAAI,EAAKM,SAASN,KACjC,2BACEO,SAAU,SAAAP,GAAC,OAAI,EAAKO,SAASP,IAC7BG,MAAOtB,KAAKkB,MAAMV,KAClBmB,KAAK,OACLC,YAAY,qCACZC,UAAU,SAEZ,8C,GA1BUb,aCIpB,SAASc,IACP,IAAMC,EAAa,CAAC,SAAU,SAAU,SAAU,QAAS,SAAU,QAAS,MAAO,OAAQ,SAAU,MAAO,WAAY,QAAS,QAAS,OAAQ,SAAU,SAAU,UAAW,WAAY,OAAQ,UAAW,QAAS,YAAa,OAAQ,YAAa,SAAU,OAAQ,OAAQ,UAAW,SAAU,QAAS,OAAQ,OAAQ,YAAa,OAAQ,SAAU,UAAW,QAAS,MAAO,MAAO,QAAS,QAAS,QAAS,YAAa,YAAa,MAAO,YAAa,WAAY,OAAQ,QAAS,QAAS,OAAQ,WAAY,WAAY,OAAQ,QAAS,QAAS,SAAU,WAAY,SAAU,WAAY,UAAW,SAAU,SAAU,YACpnBC,EAAQ,CAAC,YAAa,QAAS,SAAU,OAAQ,OAAQ,OAAQ,MAAO,UAAW,OAAQ,OAAQ,SAAU,OAAQ,SAAU,OAAQ,OAAQ,UAAW,SAAU,OAAQ,QAAS,SAAU,MAAO,QAAS,OAAQ,QAAS,YAAa,OAAQ,MAAO,OAAQ,QAAS,OAAQ,SAAU,UAAW,UAAW,QAAS,OAAQ,WAAY,QAAS,OAAQ,WAAY,YAAa,UAAW,QAAS,MAAO,QAAS,OAAQ,UAAW,SAAU,QAAS,aAAc,OAAQ,QAAS,YAAa,MAAO,OAAQ,QAAS,SAAU,OAAQ,MAAO,QAAS,QAAS,QAAS,OAAQ,QAAS,QAGrlB,OAFkBD,EAAWE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAWK,SACtDJ,EAAMC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,S,IAiEvCC,E,YA9Cb,aAAe,IAAD,8BACZ,+CATFnB,MAAQ,CACNnB,SAAU,GACVQ,OAAQ,CACNQ,SAAUe,IACVhB,MAVG,IAAMmB,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBG,SAAS,MAc7C,EAsCdd,cAAgB,SAAClB,GACf,EAAKiC,MAAMC,QAAQ,CACjBC,KAAM,kBACNnC,aAvCF,EAAKiC,MAAQ,IAAIG,OAAOC,WAAW,mBAAoB,CACrDC,KAAM,EAAK1B,MAAMX,SAEnB,EAAKgC,MAAMM,GAAG,QAAQ,SAAAC,GACpB,GAAIA,EACF,OAAOC,QAAQD,MAAMA,GAEvB,IAAMvC,EAAM,eAAO,EAAKW,MAAMX,QAC9BA,EAAOG,GAAK,EAAK6B,MAAMS,SACvB,EAAK5B,SAAS,CAACb,cAEJ,EAAKgC,MAAMU,UAAU,mBAC7BJ,GAAG,QAAQ,SAACD,EAAMrC,GACrB,IAAMR,EAAW,EAAKmB,MAAMnB,SAC5BA,EAASmD,KAAK,CAAC3C,SAAQC,KAAMoC,IAC7B,EAAKxB,SAAS,CAACrB,gBAjBL,E,sEAsBZ,OACE,yBAAKG,UAAU,OACb,yBAAKA,UAAU,cACb,kDAEF,kBAAC,EAAD,CACEH,SAAUC,KAAKkB,MAAMnB,SACrBU,cAAeT,KAAKkB,MAAMX,SAE5B,kBAAC,EAAD,CACEiB,cAAexB,KAAKwB,qB,GAzCZR,aCTEmC,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnB,GACLC,QAAQD,MAAMA,EAAMxC,a","file":"static/js/main.40ecb074.chunk.js","sourcesContent":["import {Component} from \"react\";\nimport React from \"react\";\n\nclass Messages extends Component {\n  render() {\n    const {messages} = this.props;\n    return (\n      <ul className=\"Messages-list\">\n        {messages.map(m => this.renderMessage(m))}\n      </ul>\n    );\n  }\n\n  renderMessage(message) {\n    const {member, text} = message;\n    const {currentMember} = this.props;\n    const messageFromMe = member.id === currentMember.id;\n    const className = messageFromMe ?\n      \"Messages-message currentMember\" : \"Messages-message\";\n    return (\n      <li className={className}>\n      <span\n        className=\"avatar\"\n        style={{backgroundColor: member.clientData.color}}\n      />\n        <div className=\"Message-content\">\n          <div className=\"username\">\n            {member.clientData.username}\n          </div>\n          <div className=\"text\">{text}</div>\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default Messages;","import {Component} from \"react\";\nimport React from \"react\";\n\nclass Input extends Component {\n  state = {\n    text: \"\"\n  }\n\n  onChange(e) {\n    this.setState({text: e.target.value});\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    this.setState({text: \"\"});\n    this.props.onSendMessage(this.state.text);\n  }\n\n  render() {\n    return (\n      <div className=\"Input\">\n        <form onSubmit={e => this.onSubmit(e)}>\n          <input\n            onChange={e => this.onChange(e)}\n            value={this.state.text}\n            type=\"text\"\n            placeholder=\"Enter your message and press ENTER\"\n            autoFocus=\"true\"\n          />\n          <button>Send</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Input;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Messages from \"./Messages\";\nimport Input from \"./Input\"\n\n// ### Creating a random avatar\n\nfunction randomName() {\n  const adjectives = [\"autumn\", \"hidden\", \"bitter\", \"misty\", \"silent\", \"empty\", \"dry\", \"dark\", \"summer\", \"icy\", \"delicate\", \"quiet\", \"white\", \"cool\", \"spring\", \"winter\", \"patient\", \"twilight\", \"dawn\", \"crimson\", \"wispy\", \"weathered\", \"blue\", \"billowing\", \"broken\", \"cold\", \"damp\", \"falling\", \"frosty\", \"green\", \"long\", \"late\", \"lingering\", \"bold\", \"little\", \"morning\", \"muddy\", \"old\", \"red\", \"rough\", \"still\", \"small\", \"sparkling\", \"throbbing\", \"shy\", \"wandering\", \"withered\", \"wild\", \"black\", \"young\", \"holy\", \"solitary\", \"fragrant\", \"aged\", \"snowy\", \"proud\", \"floral\", \"restless\", \"divine\", \"polished\", \"ancient\", \"purple\", \"lively\", \"nameless\"];\n  const nouns = [\"waterfall\", \"river\", \"breeze\", \"moon\", \"rain\", \"wind\", \"sea\", \"morning\", \"snow\", \"lake\", \"sunset\", \"pine\", \"shadow\", \"leaf\", \"dawn\", \"glitter\", \"forest\", \"hill\", \"cloud\", \"meadow\", \"sun\", \"glade\", \"bird\", \"brook\", \"butterfly\", \"bush\", \"dew\", \"dust\", \"field\", \"fire\", \"flower\", \"firefly\", \"feather\", \"grass\", \"haze\", \"mountain\", \"night\", \"pond\", \"darkness\", \"snowflake\", \"silence\", \"sound\", \"sky\", \"shape\", \"surf\", \"thunder\", \"violet\", \"water\", \"wildflower\", \"wave\", \"water\", \"resonance\", \"sun\", \"wood\", \"dream\", \"cherry\", \"tree\", \"fog\", \"frost\", \"voice\", \"paper\", \"frog\", \"smoke\", \"star\"];\n  const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];\n  const noun = nouns[Math.floor(Math.random() * nouns.length)];\n  return adjective + noun;\n}\n\nfunction randomColor() {\n  return '#' + Math.floor(Math.random() * 0xFFFFFF).toString(16);\n}\n\n// create App Component\n\nclass App extends Component {\n  state = {\n    messages: [],\n    member: {\n      username: randomName(),\n      color: randomColor(),\n    }\n  }\n\n  constructor() {\n    super();\n    this.drone = new window.Scaledrone(\"8pcGksl41f4QVxhq\", {\n      data: this.state.member\n    });\n    this.drone.on('open', error => {\n      if (error) {\n        return console.error(error);\n      }\n      const member = {...this.state.member};\n      member.id = this.drone.clientId;\n      this.setState({member});\n    });\n    const room = this.drone.subscribe(\"observable-room\");\n    room.on('data', (data, member) => {\n      const messages = this.state.messages;\n      messages.push({member, text: data});\n      this.setState({messages});\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h1>Gideon's Chat App</h1>\n        </div>\n        <Messages\n          messages={this.state.messages}\n          currentMember={this.state.member}\n        />\n        <Input\n          onSendMessage={this.onSendMessage}\n        />\n      </div>\n    );\n  }\n\n  onSendMessage = (message) => {\n    this.drone.publish({\n      room: \"observable-room\",\n      message\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}